package com.example.MicroServiceGestorDeArchivos.service;

import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.example.MicroServiceGestorDeArchivos.config.JwtTokenProvider;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;

@Service
@RequiredArgsConstructor
public class MicroServiceClient {

    private static final Logger log = LoggerFactory.getLogger(MicroServiceClient.class);

    private final RestTemplate restTemplate;
    private final JwtTokenProvider jwtTokenProvider;

    // üîπ URL base del microservicio generador (desde application.properties o .yml)
    @Value("${microservicio.generador.codigos.url}")
    private String generadorCodigoUrl;

    /**
     * üîπ Crea headers con el JWT actual del JwtTokenProvider
     */
    private HttpHeaders createHeaders(MediaType contentType) {
        HttpHeaders headers = new HttpHeaders();

        if (contentType != null) {
            headers.setContentType(contentType);
        }

        String jwt = jwtTokenProvider.getCurrentJwtToken();
        if (jwt == null || jwt.isBlank()) {
            log.warn("‚ö†Ô∏è No se encontr√≥ un token JWT v√°lido en JwtTokenProvider.");
        } else {
            headers.setBearerAuth(jwt);
        }

        return headers;
    }

    /**
     * üîπ Genera un ID de archivo llamando al microservicio generador de c√≥digos
     * enviando el JWT autom√°ticamente en los headers.
     *
     * @return C√≥digo generado o null si ocurre error
     */
    public String generarIdArchivo() {
        String url = generadorCodigoUrl;
        log.info("üì° Solicitando ID de archivo a: {}", url);

        // üîπ Crea la solicitud con el token en los headers
        HttpEntity<Void> requestEntity = new HttpEntity<>(createHeaders(null));

        try {
            ResponseEntity<Object> response = restTemplate.exchange(url, HttpMethod.GET, requestEntity, Object.class);

            if (response.getStatusCode() == HttpStatus.OK && response.getBody() instanceof Map<?, ?> responseBody) {
                return (String) responseBody.get("codigo");
            } else {
                log.error("‚ö†Ô∏è Error al generar ID de archivo. C√≥digo HTTP: {}", response.getStatusCode());
                return null;
            }

        } catch (Exception e) {
            log.error("‚ùå Error al comunicarse con el microservicio generador de c√≥digos: {}", e.getMessage());
            return null;
        }
    }
}
