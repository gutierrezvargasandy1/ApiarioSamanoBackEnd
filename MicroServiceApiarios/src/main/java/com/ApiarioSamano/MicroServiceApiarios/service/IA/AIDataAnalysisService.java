package com.ApiarioSamano.MicroServiceApiarios.service.IA;

import com.ApiarioSamano.MicroServiceApiarios.dto.CodigoResponse;
import com.ApiarioSamano.MicroServiceApiarios.model.Apiarios;
import com.ApiarioSamano.MicroServiceApiarios.model.HistorialMedico;
import com.ApiarioSamano.MicroServiceApiarios.model.Receta;
import com.ApiarioSamano.MicroServiceApiarios.model.RecetaMedicamento;
import com.ApiarioSamano.MicroServiceApiarios.service.ApiariosService;
import com.ApiarioSamano.MicroServiceApiarios.service.TemperaturaApi;

import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Log4j2
public class AIDataAnalysisService {

    private final ApiariosService apiariosService;
    private final OllamaService ollamaService;
    private final TemperaturaApi temperaturaApia;

    private final ExecutorService executor = Executors.newFixedThreadPool(3);

    public CodigoResponse<Map<String, Object>> obtenerDatosEstadisticosApiarios() {
        long startTime = System.currentTimeMillis();

        try {
            log.info("üìä Iniciando an√°lisis estad√≠stico de ApiariosDB...");

            CodigoResponse<List<Apiarios>> apiariosResponse = apiariosService.obtenerTodos();
            List<Apiarios> apiarios = apiariosResponse.getData();

            if (apiarios == null || apiarios.isEmpty()) {
                return new CodigoResponse<>(204, "No hay apiarios registrados", null);
            }

            long total = apiarios.size();
            long conTratamiento = apiarios.stream().filter(a -> a.getReceta() != null).count();
            long sinTratamiento = total - conTratamiento;

            Map<String, Long> distribucionSalud = apiarios.stream()
                    .collect(Collectors.groupingBy(
                            a -> a.getSalud() != null ? a.getSalud() : "No especificada",
                            Collectors.counting()));

            // Estad√≠sticas del historial m√©dico
            Map<String, Object> estadisticasHistorial = obtenerEstadisticasHistorialMedico(apiarios);

            Map<String, Object> resumen = new HashMap<>();
            resumen.put("totalApiarios", total);
            resumen.put("conTratamiento", conTratamiento);
            resumen.put("sinTratamiento", sinTratamiento);
            resumen.put("distribucionSalud", distribucionSalud);
            resumen.put("estadisticasHistorial", estadisticasHistorial);

            String datosTexto = prepararDatosParaAnalisis(apiarios);

            String systemPrompt = """
                    Eres un experto en manejo de apiarios.
                    A partir de los datos proporcionados:
                    - Resume el estado general de los apiarios.
                    - Identifica posibles √°reas de mejora.
                    - Prop√≥n 2 acciones clave para fortalecer la salud general.
                    - Considera el historial m√©dico en tu an√°lisis.
                    Responde en m√°ximo 150 palabras con formato de puntos (‚Ä¢).
                    """;

            String analisisIA = ollamaService.generateAnalysis(systemPrompt, datosTexto, 125);

            Map<String, Object> resultado = new HashMap<>();
            resultado.put("analisisIA", analisisIA);
            resultado.put("resumenEstadistico", resumen);
            resultado.put("modeloUsado", ollamaService.getModel());
            resultado.put("tiempoProcesamiento", (System.currentTimeMillis() - startTime) + "ms");

            return new CodigoResponse<>(200, "An√°lisis estad√≠stico generado con √©xito", resultado);

        } catch (Exception e) {
            log.error("üí• Error en an√°lisis estad√≠stico: {}", e.getMessage());
            return new CodigoResponse<>(500, "Error generando an√°lisis: " + e.getMessage(), null);
        }
    }

    public CodigoResponse<Map<String, Object>> obtenerSugerenciasPorApiario(Long idApiario) {
        long startTime = System.currentTimeMillis();

        try {
            CodigoResponse<Apiarios> apiarioResponse = apiariosService.obtenerPorId(idApiario);
            Apiarios apiario = apiarioResponse.getData();

            if (apiario == null) {
                return new CodigoResponse<>(404, "Apiario no encontrado", null);
            }

            // Obtener historial m√©dico usando el m√©todo corregido
            HistorialMedico historialMedico = obtenerHistorialMedicoSeguro(apiario);

            String infoApiario = prepararInfoApiarioIndividual(apiario, historialMedico);

            String systemPrompt = """
                    Eres un experto ap√≠cola.
                    Bas√°ndote en la informaci√≥n del apiario, su salud, tratamiento actual y historial m√©dico completo:
                    - Da 3 recomendaciones pr√°cticas inmediatas.
                    - Indica si el apiario requiere monitoreo o intervenci√≥n.
                    - Menciona una sugerencia de mejora ambiental si aplica.
                    - Considera el historial m√©dico previo para recomendaciones personalizadas.
                    M√°ximo 120 palabras, formato de vi√±etas (‚Ä¢).
                    """;

            String respuestaIA = ollamaService.generateAnalysis(systemPrompt, infoApiario, 125);

            Map<String, Object> resultado = new HashMap<>();
            resultado.put("apiario", apiario.getNumeroApiario());
            resultado.put("ubicacion", apiario.getUbicacion());
            resultado.put("saludActual", apiario.getSalud());
            resultado.put("sugerenciasIA", respuestaIA);
            resultado.put("historialMedico", historialMedico);
            resultado.put("estadisticasApiario", obtenerEstadisticasIndividuales(apiario, historialMedico));
            resultado.put("modeloUsado", ollamaService.getModel());
            resultado.put("tiempoProcesamiento", (System.currentTimeMillis() - startTime) + "ms");

            return new CodigoResponse<>(200, "Sugerencias generadas exitosamente", resultado);

        } catch (Exception e) {
            log.error("üí• Error generando sugerencias: {}", e.getMessage());
            return new CodigoResponse<>(500, "Error generando sugerencias: " + e.getMessage(), null);
        }
    }

    public CodigoResponse<Map<String, Object>> obtenerPrediccionesDeCuidado() {
        long startTime = System.currentTimeMillis();

        try {
            // 1Ô∏è‚É£ Obtener lista de apiarios
            CodigoResponse<List<Apiarios>> apiariosResponse = apiariosService.obtenerTodos();
            List<Apiarios> apiarios = apiariosResponse.getData();

            if (apiarios == null || apiarios.isEmpty()) {
                return new CodigoResponse<>(204, "No hay apiarios registrados para an√°lisis", null);
            }

            // 2Ô∏è‚É£ Preparar datos base de los apiarios
            String datos = prepararDatosParaAnalisis(apiarios);

            log.error("Datos para predicci√≥n: {}", datos);

            // 3Ô∏è‚É£ Agregar contexto de ubicaci√≥n y clima actual
            String ubicacion = "Dolores Hidalgo, Guanajuato, M√©xico";
            double temperaturaActual = temperaturaApia.obtenerTemperaturaActualDolores();
            log.error("Datos para predicci√≥n: {}", temperaturaActual);
            String contextoClimatico = String.format(
                    "Los apiarios est√°n ubicados en %s. " +
                            "La temperatura actual es de %.1f¬∞C. " +
                            "Considera este clima en tus predicciones y recomendaciones.\n\n",
                    ubicacion, temperaturaActual);
            log.error("Datos para predicci√≥n: {}", contextoClimatico);

            // 4Ô∏è‚É£ Instrucci√≥n al modelo IA
            String systemPrompt = """
                    Act√∫a como un asistente predictivo de apicultura especializado en clima y salud de colmenas.
                    Analiza los datos de los apiarios considerando el contexto clim√°tico actual y el historial m√©dico.
                    Predice los principales riesgos en los pr√≥ximos 30 d√≠as, incluyendo:
                    - Problemas posibles (enfermedades, estr√©s t√©rmico, baja producci√≥n, plagas)
                    - Nivel de probabilidad (Alta/Media/Baja)
                    - Medida preventiva recomendada
                    - Considera patrones del historial m√©dico
                    Ajusta las recomendaciones a las condiciones ambientales locales.
                    Responde en m√°ximo 200 palabras y rapido.
                    """;

            // 5Ô∏è‚É£ Combinar datos con contexto
            String entradaIA = contextoClimatico + datos;

            // 6Ô∏è‚É£ Ejecutar an√°lisis en el modelo IA
            String prediccionIA = ollamaService.generateAnalysis(systemPrompt, entradaIA, 300);

            if (prediccionIA == null || prediccionIA.isBlank()) {
                return new CodigoResponse<>(500, "El an√°lisis de IA no devolvi√≥ resultado", null);
            }

            // 7Ô∏è‚É£ Construir respuesta final
            Map<String, Object> resultado = new HashMap<>();
            resultado.put("prediccionesIA", prediccionIA);
            resultado.put("apiariosAnalizados", apiarios.size());
            resultado.put("ubicacion", ubicacion);
            resultado.put("temperaturaActual", temperaturaActual + "¬∞C");
            resultado.put("resumenHistorial", obtenerResumenHistorialGlobal(apiarios));
            resultado.put("modeloUsado", ollamaService.getModel());
            resultado.put("tiempoProcesamiento", (System.currentTimeMillis() - startTime) + "ms");

            return new CodigoResponse<>(200, "Predicciones generadas exitosamente", resultado);

        } catch (Exception e) {
            log.error("üí• Error generando predicciones de cuidado: ", e);
            return new CodigoResponse<>(500, "Error generando predicciones: " + e.getMessage(), null);
        }
    }

    public CodigoResponse<Map<String, Object>> consultaPersonalizada(String pregunta) {
        long startTime = System.currentTimeMillis();

        try {
            log.info("üí¨ Procesando consulta personalizada: {}", pregunta);

            if (pregunta == null || pregunta.trim().isEmpty()) {
                return new CodigoResponse<>(400, "La pregunta no puede estar vac√≠a", null);
            }

            // Obtener datos contextuales para enriquecer la respuesta
            String contextoApiarios = obtenerContextoApiarios();

            // Preparar prompt con contexto
            String promptCompleto = String.format(
                    "Contexto actual del sistema ap√≠cola:\n%s\n\nPregunta del usuario: %s",
                    contextoApiarios, pregunta);

            String systemPrompt = """
                    Eres un experto ap√≠cola especializado en manejo de colmenas, salud de abejas, producci√≥n de miel y gesti√≥n de apiarios.
                    Responde de manera t√©cnica pero clara en espa√±ol.
                    S√© conciso (m√°ximo 150 palabras) pero informativo.
                    Si la pregunta requiere datos espec√≠ficos que no tienes, sugiere consultar los reportes detallados.
                    Proporciona recomendaciones pr√°cticas basadas en mejores pr√°cticas ap√≠colas.
                    """;

            String respuestaIA = ollamaService.generateAnalysis(systemPrompt, promptCompleto, 150);

            Map<String, Object> resultado = new HashMap<>();
            resultado.put("consulta", pregunta);
            resultado.put("respuesta", respuestaIA);
            resultado.put("contextoUtilizado", !contextoApiarios.contains("No hay datos"));
            resultado.put("modeloUsado", ollamaService.getModel());
            resultado.put("tiempoProcesamiento", (System.currentTimeMillis() - startTime) + "ms");

            log.info("‚úÖ Consulta procesada exitosamente");
            return new CodigoResponse<>(200, "Consulta procesada exitosamente", resultado);

        } catch (Exception e) {
            log.error("üí• Error en consulta personalizada: {}", e.getMessage());
            return new CodigoResponse<>(500, "Error procesando consulta: " + e.getMessage(), null);
        }
    }

    private String obtenerContextoApiarios() {
        try {
            CodigoResponse<List<Apiarios>> apiariosResponse = apiariosService.obtenerTodos();
            List<Apiarios> apiarios = apiariosResponse.getData();

            if (apiarios == null || apiarios.isEmpty()) {
                return "No hay datos de apiarios registrados en el sistema.";
            }

            StringBuilder contexto = new StringBuilder();
            contexto.append("RESUMEN DEL SISTEMA APIARIO:\n");
            contexto.append("‚Ä¢ Total de apiarios: ").append(apiarios.size()).append("\n");

            long conTratamiento = apiarios.stream().filter(a -> a.getReceta() != null).count();
            contexto.append("‚Ä¢ Apiarios con tratamiento: ").append(conTratamiento).append("\n");
            contexto.append("‚Ä¢ Apiarios sin tratamiento: ").append(apiarios.size() - conTratamiento).append("\n");

            // Distribuci√≥n de salud
            Map<String, Long> distribucionSalud = apiarios.stream()
                    .collect(Collectors.groupingBy(
                            a -> a.getSalud() != null ? a.getSalud() : "No especificada",
                            Collectors.counting()));

            contexto.append("‚Ä¢ Distribuci√≥n de salud: ").append(distribucionSalud).append("\n");

            return contexto.toString();

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è No se pudo obtener contexto de apiarios: {}", e.getMessage());
            return "No se pudieron cargar los datos actuales de apiarios.";
        }
    }

    private String obtenerContextoSalud() {
        try {
            CodigoResponse<List<Apiarios>> apiariosResponse = apiariosService.obtenerTodos();
            List<Apiarios> apiarios = apiariosResponse.getData();

            if (apiarios == null || apiarios.isEmpty()) {
                return "No hay datos de apiarios para an√°lisis de salud.";
            }

            StringBuilder contexto = new StringBuilder();
            contexto.append("AN√ÅLISIS DE SALUD APIARIA:\n");

            Map<String, Long> saludStats = apiarios.stream()
                    .collect(Collectors.groupingBy(
                            a -> a.getSalud() != null ? a.getSalud() : "No especificada",
                            Collectors.counting()));

            saludStats.forEach((salud, count) -> {
                contexto.append("‚Ä¢ ").append(salud).append(": ").append(count).append(" apiarios\n");
            });

            long conHistorial = apiarios.stream()
                    .filter(a -> a.getHistorialMedico() != null)
                    .count();
            contexto.append("‚Ä¢ Apiarios con historial m√©dico: ").append(conHistorial).append("/")
                    .append(apiarios.size()).append("\n");

            return contexto.toString();

        } catch (Exception e) {
            return "No se pudieron cargar los datos de salud.";
        }
    }

    private String obtenerContextoProduccion() {
        try {
            // Aqu√≠ puedes integrar con el servicio de producci√≥n si est√° disponible
            return "Datos de producci√≥n: Consulta el m√≥dulo de producci√≥n para informaci√≥n detallada sobre cosechas y rendimiento.";
        } catch (Exception e) {
            return "Informaci√≥n de producci√≥n no disponible actualmente.";
        }
    }

    private String obtenerContextoClima() {
        try {
            double temperatura = temperaturaApia.obtenerTemperaturaActualDolores();
            return String.format(
                    "CONDICIONES CLIM√ÅTICAS ACTUALES:\n‚Ä¢ Temperatura en Dolores Hidalgo: %.1f¬∞C\n‚Ä¢ Ubicaci√≥n: Dolores Hidalgo, Guanajuato, M√©xico",
                    temperatura);
        } catch (Exception e) {
            return "Datos clim√°ticos no disponibles actualmente.";
        }
    }

    private String obtenerContextoTratamientos() {
        try {
            CodigoResponse<List<Apiarios>> apiariosResponse = apiariosService.obtenerTodos();
            List<Apiarios> apiarios = apiariosResponse.getData();

            if (apiarios == null || apiarios.isEmpty()) {
                return "No hay datos de tratamientos.";
            }

            long conTratamiento = apiarios.stream()
                    .filter(a -> a.getReceta() != null)
                    .count();

            StringBuilder contexto = new StringBuilder();
            contexto.append("ESTADO DE TRATAMIENTOS:\n");
            contexto.append("‚Ä¢ Apiarios con tratamiento activo: ").append(conTratamiento).append("\n");
            contexto.append("‚Ä¢ Apiarios sin tratamiento: ").append(apiarios.size() - conTratamiento).append("\n");
            contexto.append("‚Ä¢ Porcentaje en tratamiento: ")
                    .append(String.format("%.1f%%", (conTratamiento * 100.0) / apiarios.size())).append("\n");

            return contexto.toString();

        } catch (Exception e) {
            return "No se pudieron cargar los datos de tratamientos.";
        }
    }

    private String obtenerDescripcionContexto(String tipoContexto) {
        switch (tipoContexto.toLowerCase()) {
            case "salud":
                return "de Salud Apiaria";
            case "produccion":
                return "de Producci√≥n";
            case "clima":
                return "Clim√°tico";
            case "tratamientos":
                return "de Tratamientos M√©dicos";
            default:
                return "General del Sistema Apiario";
        }
    }

    private String obtenerEspecializacionContexto(String tipoContexto) {
        switch (tipoContexto.toLowerCase()) {
            case "salud":
                return "salud y enfermedades de las abejas";
            case "produccion":
                return "producci√≥n de miel y optimizaci√≥n de cosechas";
            case "clima":
                return "impacto clim√°tico en la apicultura";
            case "tratamientos":
                return "tratamientos m√©dicos y manejo sanitario de colmenas";
            default:
                return "gesti√≥n integral de apiarios";
        }
    }

    /**
     * M√©todo seguro para obtener historial m√©dico sin errores de casteo
     */
    private HistorialMedico obtenerHistorialMedicoSeguro(Apiarios apiario) {
        try {
            if (apiario.getHistorialMedico() != null && apiario.getHistorialMedico().getId() != null) {
                CodigoResponse<?> historialResponse = apiariosService
                        .obtenerHistorialMedicoPorId(apiario.getHistorialMedico().getId());

                if (historialResponse != null && historialResponse.getData() != null) {
                    // Verificar si el dato es ya un HistorialMedico
                    if (historialResponse.getData() instanceof HistorialMedico) {
                        return (HistorialMedico) historialResponse.getData();
                    }
                    // Si es un Map, convertirlo a HistorialMedico
                    else if (historialResponse.getData() instanceof Map) {
                        Map<String, Object> historialMap = (Map<String, Object>) historialResponse.getData();
                        return convertirMapAHistorialMedico(historialMap);
                    }
                }
            }
            return null;
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è No se pudo obtener el historial m√©dico para el apiario {}: {}", apiario.getId(),
                    e.getMessage());
            return null;
        }
    }

    /**
     * Convierte un Map a HistorialMedico
     */
    private HistorialMedico convertirMapAHistorialMedico(Map<String, Object> historialMap) {
        try {
            HistorialMedico historial = new HistorialMedico();

            if (historialMap.containsKey("id")) {
                historial.setId(Long.valueOf(historialMap.get("id").toString()));
            }
            if (historialMap.containsKey("notas")) {
                historial.setNotas(historialMap.get("notas").toString());
            }
            if (historialMap.containsKey("fechaAplicacion")) {
                // Aqu√≠ necesitar√≠as convertir el String a LocalDateTime seg√∫n tu formato
                // Por ahora lo dejamos como String o null
            }

            return historial;
        } catch (Exception e) {
            log.error("Error convirtiendo Map a HistorialMedico: {}", e.getMessage());
            return null;
        }
    }

    private String prepararDatosParaAnalisis(List<Apiarios> apiarios) {
        if (apiarios == null || apiarios.isEmpty()) {
            return "No hay datos de apiarios disponibles para an√°lisis.";
        }

        StringBuilder sb = new StringBuilder();
        sb.append("TOTAL APIARIOS: ").append(apiarios.size()).append("\n\n");
        sb.append("DATOS DETALLADOS CON HISTORIAL M√âDICO:\n");

        for (Apiarios apiario : apiarios) {
            sb.append("------------------------------------------------------------\n");
            sb.append("Apiario #").append(apiario.getNumeroApiario()).append("\n");
            sb.append("Ubicaci√≥n: ").append(apiario.getUbicacion()).append("\n");
            sb.append("Estado de salud: ").append(apiario.getSalud()).append("\n");

            // üè• Historial m√©dico completo (usando m√©todo seguro)
            HistorialMedico historial = obtenerHistorialMedicoSeguro(apiario);
            if (historial != null) {
                sb.append("=== HISTORIAL M√âDICO ===\n");
                sb.append("ID Historial: ").append(historial.getId()).append("\n");
                sb.append("Notas: ").append(historial.getNotas()).append("\n");
                if (historial.getFechaAplicacion() != null) {
                    sb.append("Fecha de aplicaci√≥n: ").append(historial.getFechaAplicacion()).append("\n");
                }
            } else {
                sb.append("Historial m√©dico: No disponible\n");
            }

            // üíä Receta m√©dica actual
            if (apiario.getReceta() != null) {
                Receta receta = apiario.getReceta();
                sb.append("=== TRATAMIENTO ACTUAL ===\n");
                sb.append("Descripci√≥n: ").append(receta.getDescripcion()).append("\n");
                sb.append("Fecha de creaci√≥n: ").append(receta.getFechaDeCreacion()).append("\n");

                // Medicamentos de la receta
                if (receta.getMedicamentos() != null && !receta.getMedicamentos().isEmpty()) {
                    sb.append("Medicamentos: ");
                    for (RecetaMedicamento medicamento : receta.getMedicamentos()) {
                        sb.append("ID Medicamento: ").append(medicamento.getIdMedicamento());
                        if (medicamento.getMedicamentoInfo() != null) {
                            sb.append(" (Info disponible)");
                        }
                        sb.append("; ");
                    }
                    sb.append("\n");
                }
            }

            sb.append("\n");
        }

        return sb.toString();
    }

    /**
     * Prepara la informaci√≥n de un apiario individual con historial m√©dico completo
     */
    private String prepararInfoApiarioIndividual(Apiarios apiario, HistorialMedico historialMedico) {
        if (apiario == null) {
            return "No se encontr√≥ informaci√≥n del apiario solicitado.";
        }

        StringBuilder sb = new StringBuilder();
        sb.append("Apiario #").append(apiario.getNumeroApiario()).append("\n");
        sb.append("Ubicaci√≥n: ").append(apiario.getUbicacion()).append("\n");
        sb.append("Estado de salud actual: ").append(apiario.getSalud()).append("\n");

        // Tratamiento actual
        if (apiario.getReceta() != null) {
            Receta receta = apiario.getReceta();
            sb.append("=== TRATAMIENTO ACTUAL ===\n");
            sb.append("Descripci√≥n: ").append(receta.getDescripcion()).append("\n");
            sb.append("Fecha de creaci√≥n: ").append(receta.getFechaDeCreacion()).append("\n");

            // Medicamentos
            if (receta.getMedicamentos() != null && !receta.getMedicamentos().isEmpty()) {
                sb.append("Medicamentos recetados:\n");
                for (RecetaMedicamento medicamento : receta.getMedicamentos()) {
                    sb.append("  - ID Medicamento: ").append(medicamento.getIdMedicamento());
                    if (medicamento.getMedicamentoInfo() != null) {
                        sb.append(" (").append(medicamento.getMedicamentoInfo().getNombre()).append(")");
                    }
                    sb.append("\n");
                }
            }
        } else {
            sb.append("Tratamiento actual: No tiene tratamiento asignado\n");
        }

        // Historial m√©dico completo
        if (historialMedico != null) {
            sb.append("\n=== HISTORIAL M√âDICO COMPLETO ===\n");
            sb.append("ID Historial: ").append(historialMedico.getId()).append("\n");
            sb.append("Notas m√©dicas: ").append(historialMedico.getNotas()).append("\n");
            if (historialMedico.getFechaAplicacion() != null) {
                sb.append("Fecha de aplicaci√≥n: ").append(historialMedico.getFechaAplicacion()).append("\n");
            }
        } else {
            sb.append("Historial m√©dico: No disponible\n");
        }

        return sb.toString();
    }

    /**
     * Obtiene estad√≠sticas del historial m√©dico de todos los apiarios
     */
    private Map<String, Object> obtenerEstadisticasHistorialMedico(List<Apiarios> apiarios) {
        Map<String, Object> estadisticas = new HashMap<>();

        long conHistorial = apiarios.stream()
                .filter(a -> a.getHistorialMedico() != null)
                .count();

        long sinHistorial = apiarios.size() - conHistorial;

        // Contar apiarios con notas en el historial
        long conNotasMedicas = apiarios.stream()
                .filter(a -> a.getHistorialMedico() != null)
                .filter(a -> a.getHistorialMedico().getNotas() != null &&
                        !a.getHistorialMedico().getNotas().isEmpty())
                .count();

        estadisticas.put("totalConHistorial", conHistorial);
        estadisticas.put("totalSinHistorial", sinHistorial);
        estadisticas.put("porcentajeConHistorial", String.format("%.1f%%", (conHistorial * 100.0) / apiarios.size()));
        estadisticas.put("conNotasMedicas", conNotasMedicas);

        return estadisticas;
    }

    /**
     * Obtiene estad√≠sticas individuales para un apiario espec√≠fico
     */
    private Map<String, Object> obtenerEstadisticasIndividuales(Apiarios apiario, HistorialMedico historial) {
        Map<String, Object> stats = new HashMap<>();

        stats.put("tieneHistorial", historial != null);
        stats.put("tieneTratamientoActual", apiario.getReceta() != null);

        if (historial != null) {
            stats.put("tieneNotasMedicas",
                    historial.getNotas() != null && !historial.getNotas().isEmpty());
            stats.put("fechaUltimoHistorial", historial.getFechaAplicacion());
        }

        if (apiario.getReceta() != null) {
            stats.put("cantidadMedicamentos",
                    apiario.getReceta().getMedicamentos() != null ? apiario.getReceta().getMedicamentos().size() : 0);
            stats.put("fechaCreacionReceta", apiario.getReceta().getFechaDeCreacion());
        }

        return stats;
    }

    /**
     * Obtiene un resumen global del historial m√©dico
     */
    private Map<String, Object> obtenerResumenHistorialGlobal(List<Apiarios> apiarios) {
        Map<String, Object> resumen = new HashMap<>();

        List<Apiarios> apiariosConHistorial = apiarios.stream()
                .filter(a -> a.getHistorialMedico() != null)
                .collect(Collectors.toList());

        resumen.put("totalApiariosConHistorial", apiariosConHistorial.size());
        resumen.put("porcentajeConHistorial",
                String.format("%.1f%%", (apiariosConHistorial.size() * 100.0) / apiarios.size()));

        // Apiarios con tratamiento actual
        long conTratamientoActual = apiarios.stream()
                .filter(a -> a.getReceta() != null)
                .count();

        resumen.put("conTratamientoActual", conTratamientoActual);
        resumen.put("porcentajeConTratamiento",
                String.format("%.1f%%", (conTratamientoActual * 100.0) / apiarios.size()));

        return resumen;
    }
}