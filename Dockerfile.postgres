FROM postgres:16

# Crear todos los SQL files
RUN cat > /docker-entrypoint-initdb.d/01-init.sql <<'EOF'
SELECT 'CREATE DATABASE "FileStorageDB"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'FileStorageDB')\gexec
SELECT 'CREATE DATABASE "UsuariosDB"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'UsuariosDB')\gexec
SELECT 'CREATE DATABASE "ApiariosDB"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'ApiariosDB')\gexec
SELECT 'CREATE DATABASE "ProduccionDB"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'ProduccionDB')\gexec
SELECT 'CREATE DATABASE "AlmacenDB"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'AlmacenDB')\gexec
SELECT 'CREATE DATABASE "ProveedoresDB"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'ProveedoresDB')\gexec
EOF

RUN cat > /docker-entrypoint-initdb.d/02-usuarios.sql <<'EOF'
\connect UsuariosDB

CREATE TABLE IF NOT EXISTS Usuarios (
    nombre VARCHAR(100) NOT NULL,
    apellido_ma VARCHAR(100) NOT NULL,
    otp_expiracion TIMESTAMP,
    rol VARCHAR(50) NOT NULL CHECK (rol IN ('OPERADOR', 'ADMINISTRADOR', 'CLIENTE')),
    id SERIAL PRIMARY KEY,
    estado BOOLEAN DEFAULT TRUE,
    apellido_pa VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    contrasena VARCHAR(255) NOT NULL,
    otp VARCHAR(6)
);

INSERT INTO Usuarios (nombre, apellido_ma, otp_expiracion, rol, estado, apellido_pa, email, contrasena, otp)
VALUES 
('Juan', 'García', NULL, 'ADMINISTRADOR', TRUE, 'Pérez', 'androoz706@gmail.com', '$2a$10$3McdT1jxOvlhPwlagpGl0ud3kaqb52B.wspUNPM/K0QLg63VolV4W', NULL),
('María', 'Martínez', NULL, 'CLIENTE', TRUE, 'López', 'maria@email.com', 'contraseña456', NULL),
('Carlos', 'Sánchez', NULL, 'OPERADOR', TRUE, 'Ramírez', 'carlos@email.com', 'clave789', NULL),
('Ana', 'Hernández', NULL, 'ADMINISTRADOR', TRUE, 'Torres', 'ana@email.com', 'pass321', NULL),
('Luis', 'Rojas', NULL, 'CLIENTE', TRUE, 'Gómez', 'luis@email.com', 'seguro654', NULL);
EOF

RUN cat > /docker-entrypoint-initdb.d/03-apiarios.sql <<'EOF'
\connect ApiariosDB

CREATE TABLE IF NOT EXISTS Receta (
    id SERIAL PRIMARY KEY,
    descripcion VARCHAR(500),
    fecha_de_creacion TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS RecetaMedicamento (
    id SERIAL PRIMARY KEY,
    id_receta INT REFERENCES Receta(id) ON DELETE CASCADE,
    id_medicamento INT
);

CREATE TABLE IF NOT EXISTS HistorialMedico (
    id SERIAL PRIMARY KEY,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    notas VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS HistorialRecetas (
    id SERIAL PRIMARY KEY,
    id_historial_medico INT REFERENCES HistorialMedico(id) ON DELETE CASCADE,
    id_receta INT REFERENCES Receta(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Apiarios (
    id SERIAL PRIMARY KEY,
    numero_apiario INT NOT NULL UNIQUE,
    ubicacion VARCHAR(200) NOT NULL,
    salud VARCHAR(100),
    id_receta INT REFERENCES Receta(id),
    id_historial_medico INT REFERENCES HistorialMedico(id)
);

INSERT INTO HistorialMedico (notas)
VALUES 
('Colmena en buen estado de salud'),
('Revisar en 15 días'),
('Monitorear temperatura'),
('Excelente respuesta al tratamiento'),
('Colmena recuperándose bien');

INSERT INTO Apiarios (numero_apiario, ubicacion, salud, id_receta, id_historial_medico)
VALUES 
(1, 'Campo Norte - Coordenadas 19.4326, -99.1332', 'Excelente', 1, 1),
(2, 'Valle Florido - Coordenadas 19.4350, -99.1350', 'Buena', 2, 2),
(3, 'Loma Alta - Coordenadas 19.4300, -99.1300', 'Regular', 3, 3),
(4, 'Pradera Verde - Coordenadas 19.4380, -99.1380', 'Excelente', 4, 4),
(5, 'Cerro Dulce - Coordenadas 19.4330, -99.1320', 'Buena', 5, 5);
EOF


RUN cat > /docker-entrypoint-initdb.d/04-produccion.sql <<'EOF'
\connect ProduccionDB

CREATE TABLE IF NOT EXISTS Lotes (
    id SERIAL PRIMARY KEY,
    numero_seguimiento VARCHAR(50) NOT NULL,
    tipo_producto VARCHAR(100) NOT NULL,
    fecha_creacion DATE NOT NULL,
    ubicacion VARCHAR(200)
);

INSERT INTO Lotes (numero_seguimiento, tipo_producto, fecha_creacion, ubicacion)
VALUES 
('LT-2024-001', 'Miel de Flor de Naranjo', '2024-01-15', 'Almacén Principal - Estante A1'),
('LT-2024-002', 'Miel Multifloral', '2024-01-20', 'Almacén Principal - Estante B2'),
('LT-2024-003', 'Propóleo Puro', '2024-02-01', 'Almacén Secundario - Estante C3'),
('LT-2024-004', 'Jalea Real Fresca', '2024-02-10', 'Cámara Fría - Sección 1'),
('LT-2024-005', 'Cera de Abejas', '2024-02-15', 'Almacén Principal - Estante D4');

CREATE TABLE IF NOT EXISTS Cosechas (
    id SERIAL PRIMARY KEY,
    fecha_cosecha DATE NOT NULL,
    id_lote INT REFERENCES Lotes(id),
    calidad VARCHAR(100),
    cantidad DECIMAL(10,2),
    id_apiario INT
);

INSERT INTO Cosechas (fecha_cosecha, id_lote, calidad, cantidad, id_apiario)
VALUES 
('2024-01-10', 1, 'Premium', 150.50, 1),
('2024-01-18', 2, 'Estándar', 200.75, 2),
('2024-01-25', 3, 'Extra', 45.25, 3),
('2024-02-05', 4, 'Premium', 12.80, 4),
('2024-02-12', 5, 'Estándar', 85.60, 5),
('2024-02-20', 1, 'Extra', 180.25, 1),
('2024-02-25', 2, 'Premium', 220.40, 2);

CREATE TABLE IF NOT EXISTS Productos (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(200) NOT NULL,
    precio_mayoreo DECIMAL(12,2) NOT NULL,
    precio_menudeo DECIMAL(12,2),
    foto BYTEA,
    codigo_barras VARCHAR(100) UNIQUE,
    id_lote INT NOT NULL REFERENCES Lotes(id),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    activo BOOLEAN DEFAULT TRUE
);

EOF

RUN cat > /docker-entrypoint-initdb.d/05-almacen.sql <<'EOF'
\connect AlmacenDB

CREATE TABLE IF NOT EXISTS Almacen (
    id SERIAL PRIMARY KEY,
    numero_seguimiento VARCHAR(50) NOT NULL,
    ubicacion VARCHAR(200),
    espacios_ocupados INT,
    capacidad INT
);

INSERT INTO Almacen (numero_seguimiento, ubicacion, espacios_ocupados, capacidad)
VALUES 
('ALM-001', 'Edificio Principal - Nivel 1', 45, 100),
('ALM-002', 'Edificio Principal - Nivel 2', 30, 80),
('ALM-003', 'Bodega Exterior - Zona A', 25, 50),
('ALM-004', 'Bodega Refrigerada', 15, 30),
('ALM-005', 'Almacén de Herramientas', 20, 40);

CREATE TABLE IF NOT EXISTS Herramientas (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    foto BYTEA,
    id_almacen INT REFERENCES Almacen(id),
    id_proveedor INT


);

INSERT INTO Herramientas (nombre, id_almacen)
VALUES 
('Ahumador de Fuelle', 5),
('Pinza Apícola', 5),
('Traje de Protección Completo', 5),
('Cuchillo Desoperculador', 5),
('Extractor de Miel Manual', 5),
('Cepillo para Abejas', 5),
('Guantes de Cuero', 5),
('Botas de Goma', 5);

CREATE TABLE IF NOT EXISTS MateriasPrimas (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    foto BYTEA,
    cantidad DECIMAL(10,2),
    id_almacen INT REFERENCES Almacen(id),
    id_proveedor INT
);

CREATE TABLE IF NOT EXISTS Medicamento (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,     
    descripcion VARCHAR(500),
    id_almacen INT REFERENCES Almacen(id),
    id_proveedor INT

);

INSERT INTO Medicamento (nombre, descripcion, id_almacen)
VALUES
('Antibiótico Apistán', 'Tratamiento para ácaros Varroa', 1),
('Vitaminas B12', 'Suplemento vitamínico para colmenas', 1),
('Azúcar glas', 'Alimentación complementaria', 2),
('Suplemento proteico', 'Refuerzo nutricional', 2),
('Fumagilina', 'Prevención de nosemosis', 3),
('Timol', 'Control de ácaros y patógenos', 3),
('Amitraz', 'Tratamiento contra ácaros', 4),
('Jarabe de maíz', 'Alimento líquido para colmenas', 4),
('Extracto de menta', 'Refuerzo post-cosecha', 5),
('Polen', 'Suplemento natural de proteínas', 5);

INSERT INTO MateriasPrimas (nombre, cantidad, id_almacen, id_proveedor)
VALUES 
('Frascos de Vidrio 500ml', 1000.00, 1, 1),
('Etiquetas Miel Premium', 5000.00, 1, 2),
('Cera Estampada', 250.50, 2, 3),
('Azúcar Refinado', 1500.75, 3, 1),
('Jarabe de Maíz', 800.25, 3, 4),
('Botes de Propóleo', 200.00, 4, 5),
('Cajas de Embalaje', 300.00, 1, 2),
('Tapas Herméticas', 1200.00, 1, 1);
EOF

RUN cat > /docker-entrypoint-initdb.d/06-proveedores.sql <<'EOF'
\connect ProveedoresDB

CREATE TABLE IF NOT EXISTS Proveedores (
    id SERIAL PRIMARY KEY,
    fotografia BYTEA,
    nombre_empresa VARCHAR(200) NOT NULL,
    num_telefono VARCHAR(20),
    material_provee VARCHAR(200)
);

INSERT INTO Proveedores (nombre_empresa, num_telefono, material_provee)
VALUES 
('Envases y Empaques S.A.', '+52-55-1234-5678', 'Frascos, tapas y material de embalaje'),
('Etiquetas Creativas México', '+52-55-2345-6789', 'Etiquetas personalizadas y diseño'),
('Cera Natural del Valle', '+52-55-3456-7890', 'Cera estampada y panales'),
('Dulces y Jarabes Industriales', '+52-55-4567-8901', 'Azúcar, jarabes y suplementos'),
('Productos Apícolas Premium', '+52-55-5678-9012', 'Propóleo, jalea real y derivados'),
('Equipos Apícolas Profesionales', '+52-55-6789-0123', 'Herramientas y equipo de protección'),
('Laboratorio Veterinario Especializado', '+52-55-7890-1234', 'Medicamentos y tratamientos apícolas');
EOF

RUN cat > /docker-entrypoint-initdb.d/07-filestorage.sql <<'EOF'
\connect FileStorageDB

CREATE TABLE IF NOT EXISTS archivos (
    id VARCHAR(36) PRIMARY KEY,
    nombre_original VARCHAR(500) NOT NULL,
    nombre_almacenado VARCHAR(500) NOT NULL,
    ruta_completa TEXT NOT NULL,
    tipo_mime VARCHAR(100) NOT NULL,
    tamaño BIGINT NOT NULL,
    
    
    -- Metadata específica para imágenes
    ancho INTEGER,
    alto INTEGER,
    resolucion VARCHAR(50),
    
    -- Control y seguridad
    hash VARCHAR(64),
    activo BOOLEAN DEFAULT TRUE,
    fecha_subida TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- Crear usuario específico para el file storage (opcional, para producción)
DO $$ 
BEGIN 
    IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'file_storage_user') THEN
        CREATE USER file_storage_user WITH PASSWORD 'file_storage_password_123';
    END IF;
END $$;

-- Conceder permisos al usuario
GRANT CONNECT ON DATABASE FileStorageDB TO file_storage_user;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO file_storage_user;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO file_storage_user;
GRANT USAGE ON SCHEMA public TO file_storage_user;

-- Configurar permisos por defecto para futuras tablas
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO file_storage_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO file_storage_user;
EOF

RUN chmod +x /docker-entrypoint-initdb.d/*.sql

# Exponer puerto de PostgreSQL
EXPOSE 5432

# Comando por defecto
CMD ["postgres"]